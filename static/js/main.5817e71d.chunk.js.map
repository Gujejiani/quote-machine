{"version":3,"sources":["componentss/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","assignNewQuoteIndex","selectedQuote","Card","CardContent","Typography","id","quote","author","CardActions","Button","size","onClick","IconButton","target","href","encodeURI","icon","faTwitter","faFacebook","colors","App","props","state","quotes","selectedQuoteIndex","selectQuoteIndex","bind","fetch","then","data","json","setState","this","length","random","Grid","style","backgroundColor","className","classes","container","justify","xs","lg","item","Number","isInteger","Component","withStyles","alignItems","display","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2YA4CeA,G,MAjCK,SAAC,GAAD,IAAEC,EAAF,EAAEA,oBAAqBC,EAAvB,EAAuBA,cAAvB,OAChB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAIR,kBAACC,EAAA,EAAD,CAAYC,GAAG,QAAf,IACGJ,EAAcK,MADjB,OAC2B,0BAAMD,GAAG,UAAT,IAAoBJ,EAAcM,UAK7D,kBAACC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAQJ,GAAG,YAAYK,KAAK,QAC3BC,QAASX,GADV,cAED,kBAACY,EAAA,EAAD,CACAP,GAAG,cAAcQ,OAAO,SAAUC,KAAMC,UAAU,yCAAD,OAA2Cd,EAAcK,MAAzD,8BAC7C,kBAAC,IAAD,CAAiBU,KAAMC,IAAWP,KAAK,QAM3C,kBAACE,EAAA,EAAD,CAAaC,OAAO,SAAUC,KAAMC,UAAU,yBAC9C,kBAAC,IAAD,CAAiBC,KAAME,IAAYR,KAAK,Y,eClBtCS,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAQjIC,E,kDACN,WAAYC,GAAO,IAAD,8BAClB,cAAMA,IACDC,MAAM,CACTC,OAAQ,GACRC,mBAAoB,MAEpB,EAAKC,iBAAiB,EAAKA,iBAAiBC,KAAtB,gBACtB,EAAK1B,oBAAoB,EAAKA,oBAAoB0B,KAAzB,gBAPT,E,gEASE,IAAD,OACjBC,MAAM,yIACLC,MAAK,SAAAC,GAAI,OAAGA,EAAKC,UACjBF,MAAK,SAAAL,GAAM,OAAG,EAAKQ,SAAS,CAAER,UAAU,EAAKvB,0B,yCAkB9C,GAAIgC,KAAKV,MAAMC,OAAOU,OAGvB,OAAOC,iBAAO,EAAGF,KAAKV,MAAMC,OAAOU,OAAO,K,4CAIzCD,KAAKD,SAAS,CAACP,mBAAoBQ,KAAKP,uB,+BAOxC,OACE,kBAACU,EAAA,EAAD,CAAMC,MAAO,CAACC,gBAAiBlB,EAnD3Be,iBAAO,EAAGf,EAAOc,OAAO,KAmD0BK,UAAWN,KAAKX,MAAMkB,QAAQC,UAAWnC,GAAG,YAAYoC,QAAQ,SAASD,WAAS,GACtI,kBAACL,EAAA,EAAD,CAAMO,GAAI,GAAIC,GAAI,EAAGC,MAAI,GAEvBZ,KAAK/B,cAAe,kBAAC,EAAD,CAAcA,cAAe+B,KAAK/B,cACrDD,oBAAqBgC,KAAKhC,sBAA0B,S,oCA5B3D,GAAIgC,KAAKV,MAAMC,OAAOU,QAAWY,OAAOC,UAAUd,KAAKV,MAAME,oBAG7D,OAAOQ,KAAKV,MAAMC,OAAOS,KAAKV,MAAME,wB,GAzBpBuB,aAyDHC,cA1EA,CACbR,UAAW,CACTS,WAAY,SACZC,QAAS,OACTC,OAAQ,UAsEGH,CAAmB5B,GCtEdgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5817e71d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons'\r\nimport {faFacebook} from '@fortawesome/free-brands-svg-icons'\r\nimport  './Quote.css'\r\nconst QuoteMachine =({assignNewQuoteIndex, selectedQuote})=>(\r\n    <Card>\r\n        <CardContent>\r\n        \r\n\r\n \r\n<Typography id=\"text\">\r\n \"{selectedQuote.quote}\" - <span id='author'> {selectedQuote.author}</span>\r\n</Typography>\r\n    \r\n \r\n        </CardContent>\r\n<CardActions>\r\n   <Button id='new-quote' size='small'\r\n    onClick={assignNewQuoteIndex}>Next Quote</Button>\r\n  <IconButton \r\n  id=\"tweet-quote\" target=\"_blank\"  href={encodeURI( `https://twitter.com/intent/tweet?text=${selectedQuote.quote}&hashtags=thewebdevcoach`)}  >\r\n      <FontAwesomeIcon icon={faTwitter} size='xs' ></FontAwesomeIcon>\r\n\r\n     \r\n\r\n  </IconButton>\r\n\r\n  <IconButton  target=\"_blank\"  href={encodeURI( `https://facebook.com`)}  >\r\n  <FontAwesomeIcon icon={faFacebook} size='xs' ></FontAwesomeIcon> \r\n  </IconButton>\r\n\r\n\r\n\r\n   </CardActions>\r\n   </Card>\r\n);\r\n\r\nexport default QuoteMachine","import React, {Component} from 'react';\nimport './App.css';\nimport { random } from 'lodash';\nimport 'typeface-roboto';\nimport QuoteMachine from './componentss/QuoteMachine';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh',\n  \n  }\n};\n\nvar colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\n\nconst colorIndex =()=>{\n return random(0, colors.length-1)\n}\n\n\n\nclass App extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\n  quotes: [],\n  selectedQuoteIndex: null,\n  }\n  this.selectQuoteIndex=this.selectQuoteIndex.bind(this);\n  this.assignNewQuoteIndex=this.assignNewQuoteIndex.bind(this);\n}\ncomponentDidMount(){\n  fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n  .then(data=> data.json())\n  .then(quotes=> this.setState({ quotes }, this.assignNewQuoteIndex));\n}\n\n\n// style={\n//   backgroundcolor: 'red',\n// }\n\nget selectedQuote() {\n  if(!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)) {\n    return undefined;\n  }\n  return this.state.quotes[this.state.selectedQuoteIndex];\n}\n\n\n\nselectQuoteIndex(){\n  if(!this.state.quotes.length){\n    return undefined;\n  }\n return random(0, this.state.quotes.length-1);\n}\n\nassignNewQuoteIndex(){\n  this.setState({selectedQuoteIndex: this.selectQuoteIndex() });\n\n}\n\n\nrender(){\n\n  return (\n    <Grid style={{backgroundColor: colors[colorIndex()]}} className={this.props.classes.container} id='quote-box' justify='center' container>\n      <Grid xs={11} lg={8} item >\n        {\n        this.selectedQuote? <QuoteMachine selectedQuote={this.selectedQuote}\n         assignNewQuoteIndex={this.assignNewQuoteIndex} /> : null\n}\n  </Grid>\n    </Grid>\n   );\n  }\n}\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}